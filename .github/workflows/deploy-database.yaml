name: Deploy Database

on:
  workflow_call:
    inputs:
      database:
        description: 'Database name to be created if it does not exist'
        required: true
        type: string
    secrets:
      kubeconfig:
        description: 'Kubeconfig file in base64'
        required: true
      postgres_user:
        description: 'Postgres user'
        required: true
      postgres_password:
        description: 'Postgres password'
        required: true

jobs:
  apply_k8s_manifests:
    name: Apply Kubernetes Manifests
    runs-on: ubuntu-latest

    steps:
      - name: Install kubectl
        uses: Azure/setup-kubectl@v4
        with:
          version: 'v1.30.0'

      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.kubeconfig }}" | base64 --decode > ~/.kube/config

      - name: Get kubernetes files
        uses: actions/checkout@v4
        with:
          repository: Rutger505/kubernetes-infra
          fetch-depth: 0  # Fetch all history for all branches
          # TODO remove
          ref: add-database-deploy

      - name: Insert database name into Kubernetes files
        run: |
          FILE=k8s/deployment.yaml
          
          envsubst < $FILE > /tmp/envsubst || exit 1
          
          mv /tmp/envsubst $FILE || exit 1

      - name: Apply Kubernetes manifests
        run: |
          secret_name=postgres-secret
          configmap_name=postgres-configmap
          
          if kubectl get secret $secret_name; then
            echo "secret $secret_name already exists, skipping creation."
          else
            kubectl create secret generic $secret_name \
              --from-literal=PGPASSWORD="${{ secrets.POSTGRES_PASSWORD }}" \
              --from-literal=POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}"
          
            echo "secret '$name' created."
          fi
          
          if kubectl get configmap $configmap_name; then
              echo "configmap $configmap_name already exists, skipping creation."
          else
              kubectl create configmap $configmap_name \
              --from-literal=PGUSER="${{ secrets.POSTGRES_USER }}" \
              --from-literal=POSTGRES_USER="${{ secrets.POSTGRES_USER }}" \
              --from-literal=PGDATABASE="${{ inputs.database }}"
          
              echo "configmap '$name' created."
          fi
          
          kubectl apply -f k8s/
          
          kubectl rollout restart deployment/postgres-deployment
