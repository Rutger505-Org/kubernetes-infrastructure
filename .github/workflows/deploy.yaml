name: Deploy

#on:
#  push:
#    tags:
#      - '*'

on:
  push:
    branches:
      - add-database-deploy

env:
  APP_NAME: postgres
  POSTGRES_VERSION: 17

jobs:
  deploy-postgres-to-kubernetes:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [ production, test ]
    environment: ${{ matrix.environment }}

    steps:
      - uses: actions/checkout@v4

      - name: Install envsubst and yq
        run: |
          sudo apt-get update &&
            sudo apt-get install -y gettext-base
          
          sudo wget https://github.com/mikefarah/yq/releases/v4/download/yq_linux_amd64 -O /usr/bin/yq &&
            sudo chmod +x /usr/bin/yq
          
      - name: Generate deployment config
        id: config
        run: |
          NAMESPACE=$APP_NAME-${{ matrix.environment }}
          echo "Setting namespace to NAMESPACE"
          echo "namespace=$NAMESPACE" >> $GITHUB_OUTPUT

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.31.0'

      - uses: azure/setup-kubectl@v4
        with:
          version: 'v1.31.0'

      - name: Kubernetes Set Context
        uses: Azure/k8s-set-context@v4.0.1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}

      - name: Insert environment variables into Kubernetes files
        env:
          ENVIRONMENT: ${{ matrix.environment }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        run: |
          FILES=$(ls postgres/deploy/*.yaml | tr '\n' ' ')
          
          for FILE in $FILES; do
            echo "Processing $FILE"
            envsubst < $FILE > /tmp/envsubst || exit 1
            mv /tmp/envsubst $FILE || exit 1
          done

      - name: Prevent secret re-creation
        run: |
          SECRET_PATH=postgres/deploy/secret.yaml
          
          if [ -f $SECRET_PATH ]; then
            SECRET_NAME=$(yq '.metadata.name' postgres/deploy/secret.yaml)
            SECRET_NAMESPACE=$(yq '.metadata.namespace' postgres/deploy/secret.yaml)

            if kubectl get secret $SECRET_NAME -n $SECRET_NAMESPACE 2>&1 | grep -q "not found"; then
              echo "Secret $SECRET_NAME does not exist in namespace $SECRET_NAMESPACE, leaving file for deploy step"
            else
              echo "Secret $SECRET_NAME already exists in namespace $SECRET_NAMESPACE, removing file"
              rm postgres/deploy/secret.yaml
            fi
          else
            echo "No secret file found at $SECRET_PATH. Skipping check."
          fi

      - name: Deploy to Kubernetes
        uses: Azure/k8s-deploy@v5
        with:
          namespace: ${{ steps.config.outputs.namespace }}
          manifests: |
            postgres/deploy/namespace.yaml
            postgres/deploy/
