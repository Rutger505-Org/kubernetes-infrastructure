name: Deploy to Kubernetes

on:
  workflow_call:
    inputs:
      dockerhub_username:
        description: 'Docker Hub Username'
        required: true
        type: string
      image_name:
        description: 'Docker image with tag'
        required: true
        type: string
      deployment_name:
        description: 'Kubernetes deployment name to restart'
        required: true
        type: string
      configmap_name:
        description: 'Kubernetes configmap name'
        required: true
        type: string
      configmap_literals:
        description: 'ConfigMap key-value pairs in key=value (key='value containing spaces')" format, separated by commas'
        required: true
        type: string
      secret_name:
        description: 'Kubernetes secret name'
        required: true
        type: string
      kubernetes_files_replace_literals:
        description: 'Key-value pairs to replace in Kubernetes files'
        required: false
        type: string
    secrets:
      kube_config:
        description: 'Kube config file'
        required: true
      dockerhub_token:
        description: 'Docker Hub Token'
        required: true
      secret_literals:
        description: 'Secret key-value pairs in key=value (key='value containing spaces') format, separated by commas'
        required: true

jobs:
  build-docker-image:
    name: Build and push Docker image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ inputs.dockerhub_username }}
          password: ${{ secrets.dockerhub_token }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          tags: ${{ inputs.image_name }}
          push: true

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: build-docker-image

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install kubectl
        uses: Azure/setup-kubectl@v4
        with:
          version: 'v1.30.0'

      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.kube_config }}" | base64 --decode > ~/.kube/config

      - name: Insert environment variables into Kubernetes files
        run: |
          export $(echo "${{ inputs.kubernetes_files_replace_literals }}" | tr ',' ' ')
          
          FILES=$(ls k8s/*.yaml | tr '\n' ' ')
          
          for FILE in $FILES; do
            echo "Processing $FILE"
          
            envsubst < $FILE > /tmp/envsubst || exit 1
          
            mv /tmp/envsubst $FILE || exit 1
          done

      - name: Parse ConfigMap and Secret literals
        run: |
          parse_literals() {
            local input="$1"
            local var_name="$2"
            local result=""
          
            while IFS=',' read -ra pairs; do
              for pair in "${pairs[@]}"; do
                result="$result --from-literal=$pair"
              done
            done <<< "$input"
          
            printf -v "$var_name" '%s' "$result"
          }
          
          parse_literals "${{ inputs.configmap_literals }}" "config_literals"
          echo "config_literals=$config_literals" >> "$GITHUB_ENV"
          
          parse_literals "${{ secrets.secret_literals }}" "secret_literals"
          echo "secret_literals=$secret_literals" >> "$GITHUB_ENV"

      - name: Deploy to Kubernetes
        run: |
          kubectl create configmap \
            ${{ inputs.configmap_name }} \
            ${{ env.config_literals }} \
            --dry-run=client -o yaml | kubectl apply -f -
          
          kubectl create secret generic \
            ${{ inputs.secret_name }} \
            ${{ env.secret_literals }} \
            --dry-run=client -o yaml | kubectl apply -f -
          
          kubectl apply -f k8s/
          
          kubectl rollout restart deployment/${{ inputs.deployment_name }}
